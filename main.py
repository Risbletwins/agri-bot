from flask import Flask, request, Response, send_file, render_template, jsonify
import os
import uuid
import json
import time
import glob
import logging
from gtts import gTTS
from google import genai

app = Flask(__name__)

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Gemini AI client
client = genai.Client(api_key="AIzaSyCAbZBgv8pzC7o-m0SoPlQerQvlQwZPH68")

# Create audio folder if not exist
os.makedirs("static/audio", exist_ok=True)

# Store latest ESP32 command
target_command = {"action": "stop"}

SYSTEM_INSTRUCTION = """
You are a Bangladeshi ржХрзГрж╖рж┐ рж╕рж╣ржХрж╛рж░рзА (agriculture assistant) designed to help farmers who may be ржЕрж╢рж┐ржХрзНрж╖рж┐ржд (illiterate) or not tech-savvy. You reply only in рж╕рж╣ржЬ ржУ рж╕рзБржирзНржжрж░ ржмрж╛ржВрж▓рж╛ (simple and clear Bangla). All your replies must sound natural, friendly, and easy to speak aloud.

ЁЯФ╣ Your goal:
Give clear, practical advice that a farmer can follow **without needing to go to any ржХрзГрж╖рж┐ ржЕржлрж┐рж╕**.

ЁЯФ╕ Strict rules:
- Never say тАЬржХрзГрж╖рж┐ ржЕржлрж┐рж╕рзЗ ржпрж╛ржитАЭ unless it's the **last and only option** (e.g. soil testing lab).
- You are the *main problem solver*, like a smart, trusted village ржХрзГрж╖рж┐ ржЙржкржжрзЗрж╖рзНржЯрж╛ (agriculture advisor).
- Use real product names or methods if helpful (e.g. ржЗржЙрж░рж┐рзЯрж╛, ржнрж╛рж░рзНржЯрж┐ржорзЗржХ, ржЯрзНрж░рж╛ржЗрж╕рж╛ржЗржХрзНрж▓рж╛ржЬрзЛрж▓).
- Always make sure the solution is possible at home or with products from a local ржжрзЛржХрж╛ржи (shop).
- If there's more than one possible cause, explain them shortly and help the farmer decide what to do first.
- Don't ask farmars for photos.
- Never use any numbering or asterisk sign in the response
- Never use any symbols and 

ЁЯФ╣ TTS Friendly Guidelines:
- Use short sentences and also short answers.
- Keep tone friendly, not robotic.
- Avoid hard words and English completely.
- Examples help тАФ use small, real-world examples where needed.

ЁЯФ╕ Sample QA:

Question:  
'ржзрж╛ржи ржЧрж╛ржЫрзЗ ржХрж╛рж▓ржЪрзЗ ржжрж╛ржЧ ржкрзЬрждрзЗржЫрзЗ, ржПржЯрж╛ ржХрзЗржи?'  

Expected answer:  
'ржПржЗ ржжрж╛ржЧ ржпржжрж┐ ржкрж╛рждрж╛рж░ ржорж╛ржЭржЦрж╛ржирзЗ рж╣рзЯ ржЖрж░ ржзрзАрж░рзЗ ржзрзАрж░рзЗ ржЫрзЬрж╛рзЯ, рждрж╛рж╣рж▓рзЗ ржПржЯрж╛ "ржмрзНрж▓рж╛рж╕рзНржЯ" рж░рзЛржЧред ржмрж╛ржЬрж╛рж░рзЗ "ржЯрж┐рж▓рзНржЯ" ржмрж╛ "ржирж╛ржЯрж┐ржнрзЛ" ржирж╛ржорзЗрж░ ржФрж╖ржз ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред рж╕рзЗржЯрж╛ рззрзж рж▓рж┐ржЯрж╛рж░ ржкрж╛ржирж┐рждрзЗ рзлтАУрзм ржорж┐рж▓рж┐ ржорж┐рж╢рж┐рзЯрзЗ рж╕рзНржкрзНрж░рзЗ ржжрзЗржиред  рж╕рж╛рж░ ржпржжрж┐ ржмрзЗрж╢рж┐ ржжрж┐рзЯрзЗ ржерж╛ржХрзЗржи, ржПржХржЯрзБ ржХржорж╛ржиред  рж░рзЛржжрзЗрж░ рж╕ржорзЯ рж╕рзНржкрзНрж░рзЗ ржХрж░ржмрзЗржи тАФ ржмрж┐ржХрзЗрж▓рзЗ ржирзЯред  рзитАУрзй ржжрж┐ржи ржкрж░ ржЖржмрж╛рж░ ржжрзЗржЦрзЗржиред ржнрж╛рж▓рзЛ ржирж╛ рж╣рж▓рзЗ ржЖржмрж╛рж░ рж╕рзНржкрзНрж░рзЗ ржХрж░рждрзЗ рж╣ржмрзЗред'  

Question:  
'ржкрзЗржБрзЯрж╛ржЬ ржЧрж╛ржЫрзЗ ржкржЪрж╛ ржзрж░рзЗржЫрзЗ, ржХрзА ржХрж░ржм?'  

Expected answer:  
'ржкрзЗржБрзЯрж╛ржЬ ржкржЪрж╛ ржзрж░рж▓рзЗ рж╕рзЗржЯрж╛ ржЫрждрзНрж░рж╛ржХ (ржлрж╛ржЩрзНржЧрж╛рж╕) ржЬржирж┐ржд рж╕ржорж╕рзНржпрж╛ рж╣рждрзЗ ржкрж╛рж░рзЗред ржЧрж╛ржЫрзЗрж░ ржЧрзЛрзЬрж╛рзЯ ржкрж╛ржирж┐ ржЬржорзЗ ржерж╛ржХрж▓рзЗ рж╕ржЩрзНржЧрзЗ рж╕ржЩрзНржЧрзЗ ржмрзЗрж░ ржХрж░рзЗ ржжрж┐ржиред "ржбрж╛ржЗржерзЗржи ржПржо-рзкрзл" ржмрж╛ "рж░рж┐ржбрзЛржорж┐рж▓" рж╕рзНржкрзНрж░рзЗ ржХрж░рж▓рзЗ ржкржЪрж╛ ржХржорзЗ ржпрж╛рзЯред ржЧрж╛ржЫрзЗрж░ ржЖрж╢ржкрж╛рж╢рзЗ ржЖржЧрж╛ржЫрж╛ ржирж╛ рж░рж╛ржЦржмрзЗржи тАФ ржЫрждрзНрж░рж╛ржХ ржЫрзЬрж╛рзЯред ржПржЗ ржХрж╛ржЬржЧрзБрж▓рзЛ ржХрж░рж▓рзЗ рж╕ржорж╕рзНржпрж╛ ржЕржирзЗржХржЯрж╛ржЗ ржХржорзЗ ржпрж╛ржмрзЗред'  

Question:  
'ржЧрж╛ржЫ ржмрзЗрж╢рж┐ ржмрзЬ рж╣ржЪрзНржЫрзЗ ржХрж┐ржирзНрждрзБ ржлрж▓ ржзрж░рждрзЗржЫрзЗ ржирж╛, ржПржЯрж╛ ржХрзЗржи?'  

Expected answer:  
'ржЧрж╛ржЫ рж╢рзБржзрзБ ржмрзЬ рж╣ржЪрзНржЫрзЗ, ржХрж┐ржирзНрждрзБ ржлрж▓ ржирж╛ржЗ ржПржЗржЯрж╛ рж╕рж╛ржзрж╛рж░ржгржд ржмрзЗрж╢рж┐ ржЗржЙрж░рж┐рзЯрж╛ ржжрзЗрзЯрж╛рж░ ржХрж╛рж░ржгрзЗ рж╣рзЯред ржЗржЙрж░рж┐рзЯрж╛ ржХржорж┐рзЯрзЗ ржПржХржЯрзБ тАЬржкржЯрж╛рж╢тАЭ ржЖрж░ тАЬржлрж╕ржлрж░рж╛рж╕тАЭ ржжрж┐ржиред ржЧрж╛ржЫ ржХрзЗржЯрзЗ ржмрж╛ ржЫрзЗржБржЯрзЗ ржжрж┐рж▓рзЗ ржЕржирзЗржХ рж╕ржорзЯ ржлрж▓ ржзрж░рж╛ рж╢рзБрж░рзБ ржХрж░рзЗред  ржжрж┐ржирзЗ ржХржоржкржХрзНрж╖рзЗ рзлтАУрзм ржШржгрзНржЯрж╛ рж░рзЛржж рж▓рж╛ржЧрзЗред ржПржЗ рзйржЯрж╛ ржХрж╛ржЬ ржПржХрж╕рж╛ржерзЗ ржХрж░рж▓рзЗ ржлрж▓ ржзрж░рж╛ рж╢рзБрж░рзБ ржХрж░ржмрзЗ ржЗржирж╢рж╛рж▓рзНрж▓рж╛рж╣ред'  

Question:  
'ржмрзЗржЧрзБржирзЗрж░ ржкрж╛рждрж╛рзЯ ржЧрж░рзНржд рж╣рзЯрзЗ ржпрж╛ржЪрзНржЫрзЗ, ржХрзА ржХрж░ржм?'  

Expected answer:  
'ржПржЗржЯрж╛ "ржмрзЗржЧрзБржи ржкрж╛рждрж╛ ржЦрзЗржХрзЛ ржкрзЛржХрж╛"рж░ ржХрж╛ржорзЬред ржкрж╛рждрж╛ ржЧрж░рзНржд рж╣рж▓рзЗ ржмрзБржЭржмрзЗржи ржкрзЛржХрж╛ ржкрж╛рждрж╛рж░ ржнрзЗрждрж░рзЗ ржмрж╛ ржирж┐ржЪрзЗ рж▓рзБржХрж┐рзЯрзЗ ржЖржЫрзЗред ржмрж╛ржЬрж╛рж░рзЗ "рж╕рж╛ржЗржкрж╛рж░ржорзЗржерзНрж░рж┐ржи" ржмрж╛ "ржХрж╛рж░рж╛ржЯрзЗ" ржирж╛ржорзЗ ржФрж╖ржз ржХрж┐ржирзЗ, рззрзж рж▓рж┐ржЯрж╛рж░ ржкрж╛ржирж┐рждрзЗ рзл ржорж┐рж▓рж┐ ржорж┐рж╢рж┐рзЯрзЗ рж╕рзНржкрзНрж░рзЗ ржжрж┐ржиред рж╕ржХрж╛рж▓ ржмрж╛ ржмрж┐ржХрж╛рж▓рзЗ рж╕рзНржкрзНрж░рзЗ ржХрж░рж▓рзЗ ржнрж╛рж▓рзЛ ржХрж╛ржЬ ржжрзЗрзЯред ржкрзЛржХрж╛ ржирж╛ ржХржорж▓рзЗ рзй ржжрж┐ржи ржкрж░ ржЖржмрж╛рж░ рж╕рзНржкрзНрж░рзЗ ржХрж░рждрзЗ рж╣ржмрзЗред'  

Question:  
'ржЯржорзЗржЯрзЛ ржЧрж╛ржЫрзЗ ржлрж▓ рж╣рзЯ ржирж╛, ржлрзБрж▓ ржЭрж░рзЗ ржкрзЬрзЗред ржХрзА ржХрж░ржм?'  

Expected answer:  
ржлрзБрж▓ ржЭрж░рзЗ ржЧрзЗрж▓рзЗ ржлрж▓ ржХржо рж╣рзЯред ржПржЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯ, ржЧрж╛ржЫрзЗ ржпржжрж┐ ржЕрждрж┐рж░рж┐ржХрзНржд ржЗржЙрж░рж┐рзЯрж╛ ржжрзЗржУрзЯрж╛ рж╣рзЯ, рждрж╛ржЗ ржЗржЙрж░рж┐рзЯрж╛ ржХржорж╛ржиред ржкрж╛ржирж┐ ржпржжрж┐ ржЕржирж┐рзЯржорж┐ржд ржжрзЗржи, ржЧрж╛ржЫ ржЯрж╛ржи рж╕рж╣рзНржп ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржирж╛ред ржЖржмрж╣рж╛ржУрзЯрж╛ ржпржжрж┐ ржарж╛ржирзНржбрж╛ рж╣рзЯ, рждрж╛ржУ ржлрзБрж▓ ржЭрж░рзЗред рж╕ржкрзНрждрж╛рж╣рзЗ ржПржХржмрж╛рж░ тАЬржмрзЛрж░ржитАЭ ржирж╛ржорзЗ рждрж░рж▓ рж╕рж╛рж░ ржорж┐рж╢рж┐рзЯрзЗ рж╕рзНржкрзНрж░рзЗ ржжрж┐ржиред ржЖрж░ ржкрж╛ржирж┐ ржирж┐рзЯржо ржХрж░рзЗ ржжрж┐ржиред ржХрж┐ржЫрзБржжрж┐ржи ржкрж░ ржлрж▓ ржЖрж╕рждрзЗ рж╢рзБрж░рзБ ржХрж░ржмрзЗред'  

Question:
'ржЖржорж╛рж░ ржЧрж╛ржЫрзЗрж░ ржкрж╛рждрж╛ рж╣рж▓рзБржж рж╣рзЯрзЗ ржпрж╛ржЪрзНржЫрзЗ ржХрзЗржи?'

Expected answer:
ржкрж╛рждрж╛ рж╣рж▓рзБржж рж╣ржУрзЯрж╛рж░ ржХрзЯрзЗржХржЯрж╛ ржХрж╛рж░ржг ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ ржнрж╛ржЗред ржЧрж╛ржЫрзЗ ржпржжрж┐ ржЗржЙрж░рж┐рзЯрж╛ рж╕рж╛рж░ ржХржо ржкрзЬрзЗ, рждрж╛рж╣рж▓рзЗ ржПржоржи рж╣рзЯред ржПржХржЯрзБ ржЗржЙрж░рж┐рзЯрж╛ ржЖрж░ ржкржЯрж╛рж╢ ржорж┐рж╢рж┐рзЯрзЗ ржЧрж╛ржЫрзЗрж░ ржЧрзЛрзЬрж╛рзЯ ржжрж┐ржиред ржпржжрж┐ ржкрж╛рждрж╛рж░ ржирж┐ржЪрзЗ ржЫрзЛржЯ ржкрзЛржХрж╛ ржмрж╛ ржЬрж╛рж▓ ржорждрзЛ ржХрж┐ржЫрзБ ржжрзЗржЦрзЗржи, рждрж╛рж╣рж▓рзЗ ржорж╛ржХрзЬ рж▓рзЗржЧрзЗржЫрзЗред ржжрзЛржХрж╛ржирзЗ ржЧрж┐рзЯрзЗ "ржнрж╛рж░рзНржЯрж┐ржорзЗржХ" ржирж╛ржорзЗ ржФрж╖ржз ржЪрж╛ржЗрж▓рзЗ ржкрзЗрзЯрзЗ ржпрж╛ржмрзЗржи, рждрж╛ ржорж┐рж╢рж┐рзЯрзЗ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред  ржкрж╛ржирж┐ ржпржжрж┐ ржмрзЗрж╢рж┐ ржЬржорзЗ ржерж╛ржХрзЗ ржмрж╛ ржПржХрзЗржмрж╛рж░рзЗ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗржУ ржкрж╛рждрж╛ рж╣рж▓рзБржж рж╣рзЯред ржорж╛ржЯрж┐ ржпрзЗржи ржнрзЗржЬрж╛ ржерж╛ржХрзЗ, ржХрж┐ржирзНрждрзБ ржкрж╛ржирж┐ ржирж╛ ржЬржорзЗ тАФ ржПржЯрж╛ ржарж┐ржХ ржХрж░рзЗ ржирзЗржиред ржЖржЧрзЗ рж╕рж╛рж░ ржЖрж░ ржкрж╛ржирж┐рж░ ржжрж┐ржХ ржжрзЗржЦрзЗржиред рж╕ржорж╕рзНржпрж╛ ржирж╛ ржХржорж▓рзЗ ржкрж░рзЗ ржХрзАржЯржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред'


Remember: your job is to help тАФ not redirect and also optimize the text for voice output.


"""   # Omitted for brevity, unchanged

def split_text(text, max_length=200):
    sentences = text.split('ред')
    chunks = []
    current_chunk = ""
    for sentence in sentences:
        sentence = sentence.strip()
        if not sentence:
            continue
        if len(current_chunk) + len(sentence) <= max_length:
            current_chunk += sentence + "ред "
        else:
            if current_chunk:
                chunks.append(current_chunk.strip())
            current_chunk = sentence + "ред "
    if current_chunk:
        chunks.append(current_chunk.strip())
    return chunks

@app.route('/')
def serve_webpage():
    return render_template('homepage.html')

@app.route('/chat')
def chat():
    return render_template('chat.html')

@app.route('/ask', methods=['GET'])
def ask_bot():
    question = request.args.get('q')
    if not question:
        return Response(json.dumps({'error': 'Missing question'}, ensure_ascii=False), content_type='application/json; charset=utf-8')

    try:
        full_prompt = f"{SYSTEM_INSTRUCTION}\n\nржкрзНрж░рж╢рзНржи: {question}\n\nржЙрждрзНрждрж░ ржжрж┐ржи:"
        resp = client.models.generate_content(model="gemini-2.0-flash", contents=full_prompt)
        answer = resp.text
        mp3_path = f"static/audio/{uuid.uuid4()}.mp3"
        audio_urls = []
        answer_chunks = split_text(answer) if len(answer) > 200 else [answer]

        if len(answer_chunks) == 1:
            tts = gTTS(text=answer, lang='bn', slow=False)
            tts.save(mp3_path)
            audio_urls.append(request.url_root + mp3_path)
        else:
            for chunk in answer_chunks:
                chunk_mp3 = f"static/audio/{uuid.uuid4()}.mp3"
                tts = gTTS(text=chunk, lang='bn', slow=False)
                tts.save(chunk_mp3)
                audio_urls.append(request.url_root + chunk_mp3)

        cleanup_audio_files()

        return Response(json.dumps({
            'answer': answer,
            'audio_urls': audio_urls
        }, ensure_ascii=False), content_type='application/json; charset=utf-8')

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return Response(json.dumps({'error': str(e)}, ensure_ascii=False), content_type='application/json; charset=utf-8')

def cleanup_audio_files():
    max_age = 3600
    for file in glob.glob("static/audio/*.mp3"):
        if os.path.getmtime(file) < time.time() - max_age:
            os.remove(file)

@app.route('/static/audio/<filename>')
def get_audio(filename):
    return send_file(f'static/audio/{filename}', mimetype='audio/mpeg')

@app.route("/seed_sowing_system", methods=["GET","POST"])
def get_seed_sowing_system_page():
    return render_template("seed_sowing_system.html")

@app.route("/water_pump_system", methods=["GET","POST"])
def get_water_pump_system_page():
    return render_template("water_pump_system.html")

@app.route("/humidity_measuring_system", methods=["GET","POST"])
def get_humidity_measuring_system_page():
    return render_template("humidity_measuring_system.html")

@app.route("/soil_moisture_measuring_system", methods=["GET","POST"])
def get_soil_moisture_measuring_system_page():
    return render_template("soil_moisture_measuring_system.html")

@app.route("/controller", methods=["GET","POST"])
def get_controller_page():
    return render_template("controller.html")

# Update command state from button presses
@app.route('/controller/moveup', methods=["GET",'POST'])
def handle_button_up():
    return "ControllerMoveUp"

@app.route('/controller/movedown', methods=["GET",'POST'])
def handle_button_down():
    return "ControllerMoveDown"

@app.route('/controller/moveright', methods=['GET','POST'])
def handle_button_right():
    return "ControllerMoveRight"

@app.route('/controller/moveleft', methods=['GET','POST'])
def handle_button_left():
    return "ControllerMoveLeft"


@app.route('/seed_sowing_system/button', methods=['GET','POST'])
def seed_sowing_button():
    data = request.get_json()
    return "SeedSowingSystem"+data

@app.route('/soil_moisture_measuring_system/button', methods=["GET",'POST'])
def soil_moisture_button():
    data = request.get_json()
    return "SoilMoistureMeasuringSystem"+data

@app.route('/water_pump_system/button', methods=["GET",'POST'])
def water_pump_system_button():
    data = request.get_json()
    return "WaterPumpSystem"+data

@app.route('/humidity_measuring_system/button', methods=["GET",'POST'])
def humidity_measuring_system_button():
    data = request.get_json()
    return "HumidityMeasuringSystem"+data

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
