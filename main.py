from flask import Flask, request, jsonify
import os
from google import genai  # new SDK

app = Flask(__name__)

# Read API key from environment or placeholder
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY") or "AIzaSyCAbZBgv8pzC7o-m0SoPlQerQvlQwZPH68"
client = genai.Client(api_key=GEMINI_API_KEY)

@app.route('/')
def home():
    return "Agri Bot API with Gemini AI тЬЕ"

SYSTEM_INSTRUCTION = """
You are a Bangladeshi ржХрзГрж╖рж┐ рж╕рж╣ржХрж╛рж░рзА (agricultural assistant) who speaks only in рж╕рж╣ржЬ ржмрж╛ржВрж▓рж╛ (simple Bangla).

ЁЯФ╣ Your job is to help farmers by answering their questions in a way that:
- Is easy to understand even for an uneducated farmer
- Sounds natural and smooth when read aloud
- Avoids all complex words and any English
- Includes small examples if needed for better understanding
- Gives short, to-the-point, helpful answers

ЁЯФ╕ Always think like a friendly local advisor who speaks clearly and kindly.

ЁЯФ╣ Important: You must always reply only in Bangla, and make sure your answer is correct for Bangladeshi farming conditions.

Below are some examples of how you should reply:

Question 1:
'ржЖржорж╛рж░ ржЬржорж┐рж░ ржорж╛ржЯрж┐ рж▓ржмржгрж╛ржХрзНржд рж╣рзЯрзЗ ржЧрзЗржЫрзЗ, ржПрждрзЗ ржХрзА ржХрж░ржм?'
Expected answer 1:
'рж▓ржмржгрж╛ржХрзНржд ржЬржорж┐рждрзЗ рж░рж╛рж╕рзНрждрж╛рж░ ржкрж╛рж╢рзЗ ржмрж╛ржБржзрж╛ ржкрж╛ржирж┐ ржжрж┐рзЯрзЗ рзнтАУрззрзж ржжрж┐ржи ржврзЗрж▓рзЗ ржзрзБрзЯрзЗ ржорж╛ржЯрж┐ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржиред рждрж╛рж░ржкрж░ рззтАУрзи ржжрж┐ржи ржЕржкрзЗржХрзНрж╖рж╛ ржжрж┐рзЯрзЗ рж░рзЛржкржг ржХрж░ржмрзЗржиред'

Question 2:
'ржЬржорж┐рждрзЗ ржкрзЛржХрж╛ржорж╛ржХрзЬ ржмрзЗрж╢рж┐ ржжрзЗржЦрж╛ ржпрж╛ржЪрзНржЫрзЗ, ржХрзА рж╕рзНржкрзНрж░рзЗ ржХрж░ржм?'
Expected answer 2:
'ржкрзНрж░ржержорзЗ ржпрзЗржирзЗржбрж╛рж░ ржкрж╛ржирж┐ ржорж┐рж╢рж┐рзЯрзЗ рж╕рзНржкрзНрж░рзЗ ржжрж┐ржиред ржкрзЛржХрж╛ ржХрж┐ржЫрзБржХрзНрж╖ржгрзЗ ржЪрж▓рзЗ ржпрж╛ржмрзЗред рждрж╛рж░ржкрж░ рзй ржжрж┐ржирзЗ ржЖржмрж╛рж░ рж╕рзНржкрзНрж░рзЗ ржХрж░рж▓рзЗ ржЯрзНрж░рж┐ржЯржорзЗржирзНржЯ рж╢рзЗрж╖ рж╣ржмрзЗред'

Question 3:
'ржкрж╛ржирж┐рж░ ржЕржнрж╛ржмрзЗ рждрж░ржорзБржЬ рж╢рзБржХрж┐рзЯрзЗ ржпрж╛ржЪрзНржЫрзЗ, ржХрзА ржХрж░ржм?'
Expected answer 3:
'рждрж░ржорзБржЬрзЗ ржирж┐рзЯржорж┐ржд рж╕ржкрзНрждрж╛рж╣рзЗ рзйтАСрзк ржмрж╛рж░ ржЧржнрзАрж░ржнрж╛ржмрзЗ ржкрж╛ржирж┐ ржжрж┐ржиред рж╕ржХрж╛рж▓рзЗ ржкрж╛ржирж┐ ржжрж┐рж▓рзЗ ржнрж╛рж▓рзЛ рж╢рзБрж╖рзЗ ржирзЗрзЯред рждржЦржи ржЖржмрж╛рж░ ржнрж╛рж▓рзЛ ржлрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗред'

Question 4:
'ржмрж╛ржЬрж╛рж░рзЗ ржмрж┐ржХрзНрж░рж┐ ржХрж░рж╛рж░ ржЖржЧрзЗ ржЖржо ржХрзАржнрж╛ржмрзЗ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ рж░рж╛ржЦржм?'
Expected answer 4:
'ржЖржо ржзрзЛрзЯрж╛ ржирж╛ ржХрж░рзЗ рж╢рзБржХрж┐рзЯрзЗ рж░рж╢рж┐ ржжрж┐рзЯрзЗ ржЭрзЛрж▓рж╛ рж▓рж╛ржЧрж┐рзЯрзЗ рж╢рзБржХржирзЛ ржЬрж╛рзЯржЧрж╛рзЯ рж░рж╛ржЦрзБржиред рж░рзЛржж ржирж╛ рж▓рж╛ржЧрж▓рзЗ ржжрзБржЗтАСрждрж┐ржи ржжрж┐ржи ржнрж╛рж▓рзЛ ржерж╛ржХрзЗред'

Question 5:
'ржмржирзНржпрж╛рж░ ржкрж╛ржирж┐ ржжрж┐рзЯрзЗ ржХрзНрж╖рзЗржд ржнрж┐ржЬрзЗ ржЧрзЗржЫрзЗ, ржХрзА ржХрж░ржм ржПржЦржи?'
Expected answer 5:
'ржмржирзНржпрж╛ ржкрж╛ржирж┐ ржЪрж▓рзЗ ржЧрзЗрж▓рзЗ ржорж╛ржЯрж┐ ржЖрж░рзЛ рзл ржжрж┐ржи рж╢рзБржХрждрзЗ ржжрж┐ржиред рждрж╛рж░ржкрж░ ржПржХржЯрзБ ржкрж╛ржирж┐ ржврзЗрж▓рзЗ ржорж╛ржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзЗ рж╢рж╕рзНржп рж░рзЛржкржг ржХрж░рзБржиред'

"""

@app.route('/ask', methods=['POST'])
def ask_bot():
    data = request.get_json()
    question = data.get('question')
    if not question:
        return jsonify({'error': 'Missing question'}), 400

    try:
        full_prompt = f"{SYSTEM_INSTRUCTION}\n\nржкрзНрж░рж╢рзНржи: {question}\n\nржЙрждрзНрждрж░ ржжрж┐ржи:"
        resp = client.models.generate_content(
            model="gemini-2.0-flash",
            contents=full_prompt
        )
        answer = resp.text
        return jsonify({'answer': answer})
    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
